name: Release

on:
  push:
    tags:
      - '*'

  workflow_dispatch:
    inputs:
      release_notes:
        description: 'Release notes in markdown'
        required: true
        type: string
      tag:
        description: which tag to release on
        required: true
        type: string

jobs:
  linux-build:
    runs-on: ubuntu-latest
    env:
      tag: ${{ inputs.tag || github.event.ref_names }}

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2
        with:
          ref: ${{ env.tag }}

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.22.1' # Adjust to your preferred Go version

      - name: Cache Go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      
      - name: Setup OpenGL
        uses: openrndr/setup-opengl@v1.1

      - name: Install dependencies
        run: |
          sudo apt-get install -y libc6-dev libgl1-mesa-dev libxcursor-dev libxi-dev libxinerama-dev libxrandr-dev libxxf86vm-dev libasound2-dev pkg-config xorg-dev
          go mod download

      - name: Build the application
        run: go build -o myapp

      - name: Create a release body
        run: |
          if  [[ -n "${{ inputs.release_notes }}" ]]; then
            echo "RELEASE_BODY="Release Notes: \n ${{ inputs.release_notes }}" >> $GITHUB_ENV
          fi

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.tag }}
          release_name: Release ${{ env.tag }}
          body: |
            Release for tag ${{ env.tag }}
            ${{ env.RELEASE_BODY }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./myapp
          asset_name: myapp_${{ matrix.tag }}
          asset_content_type: application/octet-stream
